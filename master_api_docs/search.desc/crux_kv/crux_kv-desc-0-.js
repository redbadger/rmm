searchState.loadedDescShard("crux_kv", 0, "A basic Key-Value store for use with Crux\nRemove a key and its value\nResponse to a <code>KeyValueOperation::Delete</code>, returning the …\nTest if a key exists\nResponse to a <code>KeyValueOperation::Exists</code>, returning whether …\nRead bytes stored under a key\nResponse to a <code>KeyValueOperation::Get</code>, returning the value …\nSupported operations\nThe result of an operation on the store.\nResponse to a <code>KeyValueOperation::ListKeys</code>, returning a …\nWrite bytes under a key\nResponse to a <code>KeyValueOperation::Set</code>, returning the value …\nRemove a <code>key</code> and its value, will dispatch the event with a …\nRemove a <code>key</code> and its value, while in an async context. …\nCheck to see if a <code>key</code> exists, will dispatch the event with …\nCheck to see if a <code>key</code> exists, while in an async context. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead a value under <code>key</code>, will dispatch the event with a …\nRead a value under <code>key</code>, while in an async context. This is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList keys that start with the provided <code>prefix</code>, starting …\nList keys that start with the provided <code>prefix</code>, starting …\nSet <code>key</code> to be the provided <code>value</code>. Typically the bytes …\nSet <code>key</code> to be the provided <code>value</code>, while in an async …\nThe cursor to start listing from, or 0 to start from the …\nThe prefix to list keys for, or an empty string to list …\nThe cursor to continue listing keys, or 0 if there are no …\nError type for KeyValue operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe value stored under a key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")