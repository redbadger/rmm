searchState.loadedDescShard("crux_http", 0, "A HTTP client for use with Crux\nConfiguration for <code>crux_http::Http</code>s and their underlying …\nContains the error value\nThe Http capability API.\nContains the success value\nAn HTTP request, returns a <code>Response</code>.\nRequest Builder\nAn HTTP Response that will be passed to in a message to an …\nAn HTTP response that exposes async methods. This is to …\nAdds a header to be added to every request by this config.\nAppend a header to the headers.\nAppend an HTTP header.\nAppend an HTTP header.\nThe base URL for a client. All request URLs will be …\nSets the body of the request from any type with implements …\nPass bytes as the request body.\nPass bytes as the request body.\nReads the entire request body into a byte buffer.\nReads the entire request body into a byte buffer.\nPass a form as the request body.\nReads and deserialized the entire request body from form …\nPass JSON as the request body.\nPass JSON as the request body.\nReads and deserialized the entire request body from json.\nReads and deserialized the entire request body from json.\nPass a string as the request body.\nPass a string as the request body.\nReads the entire response body into a string.\nReads the entire response body into a string.\nReturn the constructed <code>Request</code>.\nInstruct the Shell to perform a HTTP CONNECT request to …\nSets the Content-Type header on the request.\nGet the request content type as a <code>Mime</code>.\nGet the response content type as a <code>Mime</code>.\nGet the response content type as a <code>Mime</code>.\nInstruct the Shell to perform a HTTP DELETE request to the …\nDecode a <code>T</code> from a JSON response body prior to dispatching …\nDecode a String from the response body prior to …\nGet a request extension value.\nGet a response scoped extension value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>http::Request</code> to a <code>crux_http::Request</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruct the Shell to perform a HTTP GET request to the …\nInstruct the Shell to perform a HTTP HEAD request to the …\nSets a header on the request.\nGet an HTTP header.\nGet a header.\nGet a header.\nGet a mutable reference to a header.\nGet an HTTP header mutably.\nGet an HTTP header mutably.\nAn iterator visiting all header names in arbitrary order.\nAn iterator visiting all header names in arbitrary order.\nAn iterator visiting all header names in arbitrary order.\nAn iterator visiting all header values in arbitrary order.\nAn iterator visiting all header values in arbitrary order.\nAn iterator visiting all header values in arbitrary order.\nHeaders to be applied to every request made by this client.\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nSet a response scoped extension value.\nSet an HTTP header.\nInsert an HTTP header.\nInsert an HTTP header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>crux_http::Request</code> to an <code>http::Request</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends the constructed <code>Request</code> and returns a future that …\nReturns a iterator of references over the remaining items.\nReturns <code>true</code> if the set length of the body stream is zero, …\nReturns <code>true</code> if the set length of the body stream is zero, …\nAn iterator visiting all header pairs in arbitrary order.\nAn iterator visiting all header pairs in arbitrary order.\nAn iterator visiting all header pairs in arbitrary order.\nAn iterator visiting all header pairs in arbitrary order, …\nAn iterator visiting all header pairs in arbitrary order, …\nAn iterator visiting all header pairs in arbitrary order, …\nGet the length of the body stream, if it has been set.\nGet the length of the body stream, if it has been set.\nGet the request HTTP method.\nMiddleware types\nPush middleware onto a per-request middleware stack.\nPush middleware onto a per-request middleware stack.\nConstruct new empty config.\nCreate a new instance.\nInstruct the Shell to perform a HTTP OPTIONS request to …\nInstruct the Shell to perform a HTTP PATCH request to the …\nInstruct the Shell to perform a HTTP POST request to the …\nThe protocol for communicating with the shell\nInstruct the Shell to perform a HTTP PUT request to the …\nSet the URL querystring.\nGet the URL querystring.\nRemove a header.\nRemove a header.\nRemove a header.\nInstruct the Shell to perform an HTTP request with the …\nSends the constructed <code>Request</code> and returns its result as an …\nSends the constructed <code>Request</code> and returns a future that …\nSets the base URL for this config. All request URLs will …\nPass an <code>AsyncRead</code> stream as the request body.\nSet the body reader.\nSet the request content type from a <code>Mime</code>.\nSet a request extension value.\nSet an HTTP header.\nSet the URL querystring.\nGet the HTTP status code.\nGet the HTTP status code.\nSwaps the value of the body with another body, without …\nTake the request body as a <code>Body</code>.\nTake the response body as a <code>Body</code>.\nInstruct the Shell to perform a HTTP TRACE request to the …\nGet the request url.\nGet the HTTP protocol version.\nGet the HTTP protocol version.\nAn HTTP client, capable of sending <code>Request</code>s\nClones the Client.\nGet the current configuration.\nPerform an HTTP <code>CONNECT</code> request using the <code>Client</code> …\nPerform an HTTP <code>DELETE</code> request using the <code>Client</code> connection.\nReturns the argument unchanged.\nPerform an HTTP <code>GET</code> request using the <code>Client</code> connection.\nPerform an HTTP <code>HEAD</code> request using the <code>Client</code> connection.\nCalls <code>U::from(self)</code>.\nPerform an HTTP <code>OPTIONS</code> request using the <code>Client</code> …\nPerform an HTTP <code>PATCH</code> request using the <code>Client</code> connection.\nPerform an HTTP <code>POST</code> request using the <code>Client</code> connection.\nPerform an HTTP <code>PUT</code> request using the <code>Client</code> connection.\nSubmit a <code>Request</code> and get the response body as bytes.\nSubmit a <code>Request</code> and decode the response body from form …\nSubmit a <code>Request</code> and decode the response body from json …\nSubmit a <code>Request</code> and get the response body as a string.\nPerform a HTTP request with the given verb using the <code>Client</code>…\nSend a <code>Request</code> using this client.\nPerform an HTTP <code>TRACE</code> request using the <code>Client</code> connection.\nMiddleware that wraps around remaining middleware chain.\nThe remainder of a middleware chain, including the …\nA middleware which attempts to follow HTTP redirects.\nCreate a new instance of the Redirect middleware, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAsynchronously handle the request, and return a response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of the Redirect middleware, which …\nCreate a new instance\nAsynchronously execute the remaining middleware chain.\nBuilder for <code>HttpRequest</code>.\nError type for HttpRequestBuilder\nBuilder for <code>HttpResponse</code>.\nError type for HttpResponseBuilder\nUninitialized field\nUninitialized field\nCustom validation error\nCustom validation error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows users to build an http response.\nSets the body of the Response\nBuilds the response\nReturns the argument unchanged.\nSets a header on the response.\nCalls <code>U::from(self)</code>.\nConstructs a new ResponseBuilder with the 200 OK status …\nConstructs a new ResponseBuilder with the specified status …")